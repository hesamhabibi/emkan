module.exports = `

    type Query {
        getOrderHistory(filter: OrderFilter ,page: Int , limit: Int , sort: OrderSort): OrderData
        getOrderDetails(order_id: ID): Order
        getCartDetails(is_inquiry: Int): Order
    }
    
    type Mutation {
        addToCart(product_id: ID , mix_variant: [String], count: Int, is_inquiry: Int ): Order
        setCartCount(product_id: ID , mix_variant: [String], count: Int, is_inquiry: Int ): Order
        removeFromCart(product_id: ID , mix_variant: [String], is_inquiry: Int): Order
        applyDiscount(discount_code: String): Order
        closeCart(input:closeCartInput): closeCartResponse
    }

    type OrderData {
        data: [Order]
        paginate: Paginate
    }

    type  Order {
        id: ID
        discount_id: ID
        transaction_id: ID
        address_id: ID

        date: String
        number: String

        post_track_code: String
        shipping_method: Int
        payment_method: String

        status: Int

        note: String
        products: [orderProduct]
        discount: Discount
        transaction: Transaction
        total_prices: OrderTotalPrices

        createdAt: String
        updatedAt: String
    }

    type Transaction {
        id: ID
        status: Int
        request_parsed_response: JSON,
        callback_parsed_response: JSON,
        verify_parsed_response: JSON,
        gateway: Int,
        amount: Int,
        description: String,
        unique_number: Int,

        paidAt: String,
        verifiedAt: String,
        payment_url: String,

        tracking_code: String,
        credit_card: String,

        user_id: ID,
        order_id: ID,
    }

    type Discount {
        id: ID
        title: JSON # multi language
        title_web: String @multilang(field: "title")
        code: String
    }

    type OrderTotalPrices {
        sum_product_price_without_offer: Int
        sum_product_price: Int
        total_price_with_discount: Int
        post_price: Int
        payment_price: Int
        total_count: Int
        total_weight: Int
    }

    type orderProduct{
        product_id: ID
        mix_variant_keys: [String]
        count: Int
        note: String

        product: Product
        price: Price
    }

    input closeCartInput {
        address_id: ID
        shipping_method_id: ID
        payment_gateway_id: ID
        note: String,
        is_inquiry: Int
    }

    type closeCartResponse {
        order: Order
        payment_url: String
    }

    enum OrderSortFields {
        createdAt
        updatedAt
        date
        status
    }

    input OrderSort {
        field: OrderSortFields
        operator: sortEnum 
        statusType: Int
    }

    input OrderFilter{
        shipping_method: Int
        payment_method: Int
        status: Int
        is_inquiry: Int
    }
`;